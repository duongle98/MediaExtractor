! function(b, a) {
    object == typeof exports ? module[exports] = exports = a() : function == typeof define && define[amd] ? define([], a) : b[JQMP] = a()
}(this, function() {
    var b = b || function(b, a) {
        var e = Object[create] || function() {
                function b() {}
                return function(a) {
                    var e;
                    return b[prototype] = a,
                        e = new b,
                        b[prototype] = null,
                        e
                }
            }(),
            i = {},
            k = i[lib] = {},
            m = k[Base] = function() {
                return {
                    extend: function(b) {
                        var a = e(this);
                        return b && a[mixIn](b),
                            a[hasOwnProperty](init) && this[init] !== a[init] || (a[init] = function() {
                                a[$super][init][apply](this, arguments)
                            }),
                            a[init][prototype] = a,
                            a[$super] = this,
                            a
                    },
                    create: function() {
                        var b = this[extend]();
                        return b[init][apply](b, arguments),
                            b
                    },
                    init: function() {},
                    mixIn: function(b) {
                        for (var a in b) {
                            b[hasOwnProperty](a) && (this[a] = b[a])
                        };
                        b[hasOwnProperty](toString) && (this[toString] = b[toString])
                    },
                    clone: function() {
                        return this[init][prototype][extend](this)
                    }
                }
            }(),
            p = k[WordArray] = m[extend]({
                init: function(b, e) {
                    b = this[words] = b || [],
                        e != a ? this[sigBytes] = e : this[sigBytes] = 4 * b[length]
                },
                toString: function(b) {
                    return (b || d)[stringify](this)
                },
                concat: function(b) {
                    var a = this[words],
                        e = b[words],
                        i = this[sigBytes],
                        k = b[sigBytes];
                    if (this[clamp](),
                        i % 4) {
                        for (var m = 0; m < k; m++) {
                            var p = e[m >>> 2] >>> 24 - m % 4 * 8 & 255;
                            a[i + m >>> 2] |= p << 24 - (i + m) % 4 * 8
                        }
                    } else {
                        for (var m = 0; m < k; m += 4) {
                            a[i + m >>> 2] = e[m >>> 2]
                        }
                    };
                    return this[sigBytes] += k,
                        this
                },
                clamp: function() {
                    var a = this[words],
                        e = this[sigBytes];
                    a[e >>> 2] &= 4294967295 << 32 - e % 4 * 8,
                        a[length] = b[ceil](e / 4)
                },
                clone: function() {
                    var b = m[clone][call](this);
                    return b[words] = this[words][slice](0),
                        b
                },
                random: function(a) {
                    for (var e, i = [], k = function(a) {
                            var a = a,
                                e = 987654321,
                                i = 4294967295;
                            return function() {
                                e = 36969 * (65535 & e) + (e >> 16) & i,
                                    a = 18e3 * (65535 & a) + (a >> 16) & i;
                                var k = (e << 16) + a & i;
                                return k /= 4294967296,
                                    k += 0.5,
                                    k * (b[random]() > 0.5 ? 1 : -1)
                            }
                        }, m = 0; m < a; m += 4) {
                        var c = k(4294967296 * (e || b[random]()));
                        e = 987654071 * c(),
                            i[push](4294967296 * c() | 0)
                    };
                    return new p[init](i, a)
                }
            }),
            c = i[enc] = {},
            d = c[Hex] = {
                stringify: function(b) {
                    for (var a = b[words], e = b[sigBytes], i = [], k = 0; k < e; k++) {
                        var m = a[k >>> 2] >>> 24 - k % 4 * 8 & 255;
                        i[push]((m >>> 4)[toString](16)),
                            i[push]((15 & m)[toString](16))
                    };
                    return i[join]()
                },
                parse: function(b) {
                    for (var a = b[length], e = [], i = 0; i < a; i += 2) {
                        e[i >>> 3] |= parseInt(b[substr](i, 2), 16) << 24 - i % 8 * 4
                    };
                    return new p[init](e, a / 2)
                }
            },
            g = c[Latin1] = {
                stringify: function(b) {
                    for (var a = b[words], e = b[sigBytes], i = [], k = 0; k < e; k++) {
                        var m = a[k >>> 2] >>> 24 - k % 4 * 8 & 255;
                        i[push](String[fromCharCode](m))
                    };
                    return i[join]()
                },
                parse: function(b) {
                    for (var a = b[length], e = [], i = 0; i < a; i++) {
                        e[i >>> 2] |= (255 & b[charCodeAt](i)) << 24 - i % 4 * 8
                    };
                    return new p[init](e, a)
                }
            },
            j = c[Utf8] = {
                stringify: function(b) {
                    try {
                        return decodeURIComponent(escape(g[stringify](b)))
                    } catch (b) {
                        throw new Error(Malformed UTF-8 data)
                    }
                },
                parse: function(b) {
                    return g[parse](unescape(encodeURIComponent(b)))
                }
            },
            f = k[BufferedBlockAlgorithm] = m[extend]({
                reset: function() {
                    this[_data] = new p[init],
                        this[_nDataBytes] = 0
                },
                _append: function(b) {
                    string == typeof b && (b = j[parse](b)),
                        this[_data][concat](b),
                        this[_nDataBytes] += b[sigBytes]
                },
                _process: function(a) {
                    var e = this[_data],
                        i = e[words],
                        k = e[sigBytes],
                        m = this[blockSize],
                        c = 4 * m,
                        d = k / c;
                    d = a ? b[ceil](d) : b[max]((0 | d) - this[_minBufferSize], 0);
                    var g = d * m,
                        j = b[min](4 * g, k);
                    if (g) {
                        for (var f = 0; f < g; f += m) {
                            this[_doProcessBlock](i, f)
                        };
                        var q = i[splice](0, g);
                        e[sigBytes] -= j
                    };
                    return new p[init](q, j)
                },
                clone: function() {
                    var b = m[clone][call](this);
                    return b[_data] = this[_data][clone](),
                        b
                },
                _minBufferSize: 0
            }),
            q = (k[Hasher] = f[extend]({
                    cfg: m[extend](),
                    init: function(b) {
                        this[cfg] = this[cfg][extend](b),
                            this[reset]()
                    },
                    reset: function() {
                        f[reset][call](this),
                            this[_doReset]()
                    },
                    update: function(b) {
                        return this[_append](b),
                            this[_process](),
                            this
                    },
                    finalize: function(b) {
                        b && this[_append](b);
                        var a = this[_doFinalize]();
                        return a
                    },
                    blockSize: 16,
                    _createHelper: function(b) {
                        return function(a, e) {
                            return new b[init](e)[finalize](a)
                        }
                    },
                    _createHmacHelper: function(b) {
                        return function(a, e) {
                            return new q[HMAC][init](b, e)[finalize](a)
                        }
                    }
                }),
                i[algo] = {});
        return i
    }(Math);
    return function() {
            function a(b, a, e) {
                for (var i = [], m = 0, p = 0; p < a; p++) {
                    if (p % 4) {
                        var c = e[b[charCodeAt](p - 1)] << p % 4 * 2,
                            d = e[b[charCodeAt](p)] >>> 6 - p % 4 * 2;
                        i[m >>> 2] |= (c | d) << 24 - m % 4 * 8,
                            m++
                    }
                };
                return k[create](i, m)
            }
            var e = b,
                i = e[lib],
                k = i[WordArray],
                m = e[enc];
            m[Base64] = {
                stringify: function(b) {
                    var a = b[words],
                        e = b[sigBytes],
                        i = this[_map];
                    b[clamp]();
                    for (var k = [], m = 0; m < e; m += 3) {
                        for (var p = a[m >>> 2] >>> 24 - m % 4 * 8 & 255, c = a[m + 1 >>> 2] >>> 24 - (m + 1) % 4 * 8 & 255, d = a[m + 2 >>> 2] >>> 24 - (m + 2) % 4 * 8 & 255, g = p << 16 | c << 8 | d, j = 0; j < 4 && m + 0.75 * j < e; j++) {
                            k[push](i[charAt](g >>> 6 * (3 - j) & 63))
                        }
                    };
                    var f = i[charAt](64);
                    if (f) {
                        for (; k[length] % 4;) {
                            k[push](f)
                        }
                    };
                    return k[join]()
                },
                parse: function(b) {
                    var e = b[length],
                        i = this[_map],
                        k = this[_reverseMap];
                    if (!k) {
                        k = this[_reverseMap] = [];
                        for (var m = 0; m < i[length]; m++) {
                            k[i[charCodeAt](m)] = m
                        }
                    };
                    var p = i[charAt](64);
                    if (p) {
                        var c = b[indexOf](p);
                        c !== -1 && (e = c)
                    };
                    return a(b, e, k)
                },
                _map: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
            }
        }(),
        function(a) {
            function e(b, a, e, i, k, m, p) {
                var c = b + (a & e | ~a & i) + k + p;
                return (c << m | c >>> 32 - m) + a
            }

            function i(b, a, e, i, k, m, p) {
                var c = b + (a & i | e & ~i) + k + p;
                return (c << m | c >>> 32 - m) + a
            }

            function k(b, a, e, i, k, m, p) {
                var c = b + (a ^ e ^ i) + k + p;
                return (c << m | c >>> 32 - m) + a
            }

            function m(b, a, e, i, k, m, p) {
                var c = b + (e ^ (a | ~i)) + k + p;
                return (c << m | c >>> 32 - m) + a
            }
            var p = b,
                c = p[lib],
                d = c[WordArray],
                g = c[Hasher],
                j = p[algo],
                f = [];
            ! function() {
                for (var b = 0; b < 64; b++) {
                    f[b] = 4294967296 * a[abs](a[sin](b + 1)) | 0
                }
            }();
            var q = j[TUAMADAM] = g[extend]({
                _doReset: function() {
                    this[_hash] = new d[init]([1732584193, 4023233417, 2562383102, 271733878])
                },
                _doProcessBlock: function(b, a) {
                    for (var p = 0; p < 16; p++) {
                        var c = a + p,
                            d = b[c];
                        b[c] = 16711935 & (d << 8 | d >>> 24) | 4278255360 & (d << 24 | d >>> 8)
                    };
                    var g = this[_hash][words],
                        j = b[a + 0],
                        q = b[a + 1],
                        D = b[a + 2],
                        M = b[a + 3],
                        K = b[a + 4],
                        v = b[a + 5],
                        P = b[a + 6],
                        F = b[a + 7],
                        y = b[a + 8],
                        N = b[a + 9],
                        I = b[a + 10],
                        L = b[a + 11],
                        J = b[a + 12],
                        O = b[a + 13],
                        x = b[a + 14],
                        G = b[a + 15],
                        Q = g[0],
                        w = g[1],
                        z = g[2],
                        E = g[3];
                    Q = e(Q, w, z, E, j, 7, f[0]),
                        E = e(E, Q, w, z, q, 12, f[1]),
                        z = e(z, E, Q, w, D, 17, f[2]),
                        w = e(w, z, E, Q, M, 22, f[3]),
                        Q = e(Q, w, z, E, K, 7, f[4]),
                        E = e(E, Q, w, z, v, 12, f[5]),
                        z = e(z, E, Q, w, P, 17, f[6]),
                        w = e(w, z, E, Q, F, 22, f[7]),
                        Q = e(Q, w, z, E, y, 7, f[8]),
                        E = e(E, Q, w, z, N, 12, f[9]),
                        z = e(z, E, Q, w, I, 17, f[10]),
                        w = e(w, z, E, Q, L, 22, f[11]),
                        Q = e(Q, w, z, E, J, 7, f[12]),
                        E = e(E, Q, w, z, O, 12, f[13]),
                        z = e(z, E, Q, w, x, 17, f[14]),
                        w = e(w, z, E, Q, G, 22, f[15]),
                        Q = i(Q, w, z, E, q, 5, f[16]),
                        E = i(E, Q, w, z, P, 9, f[17]),
                        z = i(z, E, Q, w, L, 14, f[18]),
                        w = i(w, z, E, Q, j, 20, f[19]),
                        Q = i(Q, w, z, E, v, 5, f[20]),
                        E = i(E, Q, w, z, I, 9, f[21]),
                        z = i(z, E, Q, w, G, 14, f[22]),
                        w = i(w, z, E, Q, K, 20, f[23]),
                        Q = i(Q, w, z, E, N, 5, f[24]),
                        E = i(E, Q, w, z, x, 9, f[25]),
                        z = i(z, E, Q, w, M, 14, f[26]),
                        w = i(w, z, E, Q, y, 20, f[27]),
                        Q = i(Q, w, z, E, O, 5, f[28]),
                        E = i(E, Q, w, z, D, 9, f[29]),
                        z = i(z, E, Q, w, F, 14, f[30]),
                        w = i(w, z, E, Q, J, 20, f[31]),
                        Q = k(Q, w, z, E, v, 4, f[32]),
                        E = k(E, Q, w, z, y, 11, f[33]),
                        z = k(z, E, Q, w, L, 16, f[34]),
                        w = k(w, z, E, Q, x, 23, f[35]),
                        Q = k(Q, w, z, E, q, 4, f[36]),
                        E = k(E, Q, w, z, K, 11, f[37]),
                        z = k(z, E, Q, w, F, 16, f[38]),
                        w = k(w, z, E, Q, I, 23, f[39]),
                        Q = k(Q, w, z, E, O, 4, f[40]),
                        E = k(E, Q, w, z, j, 11, f[41]),
                        z = k(z, E, Q, w, M, 16, f[42]),
                        w = k(w, z, E, Q, P, 23, f[43]),
                        Q = k(Q, w, z, E, N, 4, f[44]),
                        E = k(E, Q, w, z, J, 11, f[45]),
                        z = k(z, E, Q, w, G, 16, f[46]),
                        w = k(w, z, E, Q, D, 23, f[47]),
                        Q = m(Q, w, z, E, j, 6, f[48]),
                        E = m(E, Q, w, z, F, 10, f[49]),
                        z = m(z, E, Q, w, x, 15, f[50]),
                        w = m(w, z, E, Q, v, 21, f[51]),
                        Q = m(Q, w, z, E, J, 6, f[52]),
                        E = m(E, Q, w, z, M, 10, f[53]),
                        z = m(z, E, Q, w, I, 15, f[54]),
                        w = m(w, z, E, Q, q, 21, f[55]),
                        Q = m(Q, w, z, E, y, 6, f[56]),
                        E = m(E, Q, w, z, G, 10, f[57]),
                        z = m(z, E, Q, w, P, 15, f[58]),
                        w = m(w, z, E, Q, O, 21, f[59]),
                        Q = m(Q, w, z, E, K, 6, f[60]),
                        E = m(E, Q, w, z, L, 10, f[61]),
                        z = m(z, E, Q, w, D, 15, f[62]),
                        w = m(w, z, E, Q, N, 21, f[63]),
                        g[0] = g[0] + Q | 0,
                        g[1] = g[1] + w | 0,
                        g[2] = g[2] + z | 0,
                        g[3] = g[3] + E | 0
                },
                _doFinalize: function() {
                    var b = this[_data],
                        e = b[words],
                        i = 8 * this[_nDataBytes],
                        k = 8 * b[sigBytes];
                    e[k >>> 5] |= 128 << 24 - k % 32;
                    var m = a[floor](i / 4294967296),
                        p = i;
                    e[(k + 64 >>> 9 << 4) + 15] = 16711935 & (m << 8 | m >>> 24) | 4278255360 & (m << 24 | m >>> 8),
                        e[(k + 64 >>> 9 << 4) + 14] = 16711935 & (p << 8 | p >>> 24) | 4278255360 & (p << 24 | p >>> 8),
                        b[sigBytes] = 4 * (e[length] + 1),
                        this[_process]();
                    for (var c = this[_hash], d = c[words], g = 0; g < 4; g++) {
                        var j = d[g];
                        d[g] = 16711935 & (j << 8 | j >>> 24) | 4278255360 & (j << 24 | j >>> 8)
                    };
                    return c
                },
                clone: function() {
                    var b = g[clone][call](this);
                    return b[_hash] = this[_hash][clone](),
                        b
                }
            });
            p[TUAMADAM] = g[_createHelper](q),
                p[HmacTUAMADAM] = g[_createHmacHelper](q)
        }(Math),
        function() {
            var a = b,
                e = a[lib],
                i = e[WordArray],
                k = e[Hasher],
                m = a[algo],
                p = [],
                c = m[SHA1] = k[extend]({
                    _doReset: function() {
                        this[_hash] = new i[init]([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
                    },
                    _doProcessBlock: function(b, a) {
                        for (var e = this[_hash][words], i = e[0], k = e[1], m = e[2], c = e[3], d = e[4], g = 0; g < 80; g++) {
                            if (g < 16) {
                                p[g] = 0 | b[a + g]
                            } else {
                                var j = p[g - 3] ^ p[g - 8] ^ p[g - 14] ^ p[g - 16];
                                p[g] = j << 1 | j >>> 31
                            };
                            var f = (i << 5 | i >>> 27) + d + p[g];
                            f += g < 20 ? (k & m | ~k & c) + 1518500249 : g < 40 ? (k ^ m ^ c) + 1859775393 : g < 60 ? (k & m | k & c | m & c) - 1894007588 : (k ^ m ^ c) - 899497514,
                                d = c,
                                c = m,
                                m = k << 30 | k >>> 2,
                                k = i,
                                i = f
                        };
                        e[0] = e[0] + i | 0,
                            e[1] = e[1] + k | 0,
                            e[2] = e[2] + m | 0,
                            e[3] = e[3] + c | 0,
                            e[4] = e[4] + d | 0
                    },
                    _doFinalize: function() {
                        var b = this[_data],
                            a = b[words],
                            e = 8 * this[_nDataBytes],
                            i = 8 * b[sigBytes];
                        return a[i >>> 5] |= 128 << 24 - i % 32,
                            a[(i + 64 >>> 9 << 4) + 14] = Math[floor](e / 4294967296),
                            a[(i + 64 >>> 9 << 4) + 15] = e,
                            b[sigBytes] = 4 * a[length],
                            this[_process](),
                            this[_hash]
                    },
                    clone: function() {
                        var b = k[clone][call](this);
                        return b[_hash] = this[_hash][clone](),
                            b
                    }
                });
            a[SHA1] = k[_createHelper](c),
                a[HmacSHA1] = k[_createHmacHelper](c)
        }(),
        function(a) {
            var e = b,
                i = e[lib],
                k = i[WordArray],
                m = i[Hasher],
                p = e[algo],
                c = [],
                d = [];
            ! function() {
                function b(b) {
                    for (var e = a[sqrt](b), i = 2; i <= e; i++) {
                        if (!(b % i)) {
                            return !1
                        }
                    };
                    return !0
                }

                function e(b) {
                    return 4294967296 * (b - (0 | b)) | 0
                }
                for (var i = 2, k = 0; k < 64;) {
                    b(i) && (k < 8 && (c[k] = e(a[pow](i, 0.5))),
                            d[k] = e(a[pow](i, 1 / 3)),
                            k++),
                        i++
                }
            }();
            var g = [],
                j = p[SHA256] = m[extend]({
                    _doReset: function() {
                        this[_hash] = new k[init](c[slice](0))
                    },
                    _doProcessBlock: function(b, a) {
                        for (var e = this[_hash][words], i = e[0], k = e[1], m = e[2], p = e[3], c = e[4], j = e[5], f = e[6], q = e[7], D = 0; D < 64; D++) {
                            if (D < 16) {
                                g[D] = 0 | b[a + D]
                            } else {
                                var M = g[D - 15],
                                    K = (M << 25 | M >>> 7) ^ (M << 14 | M >>> 18) ^ M >>> 3,
                                    v = g[D - 2],
                                    P = (v << 15 | v >>> 17) ^ (v << 13 | v >>> 19) ^ v >>> 10;
                                g[D] = K + g[D - 7] + P + g[D - 16]
                            };
                            var F = c & j ^ ~c & f,
                                y = i & k ^ i & m ^ k & m,
                                N = (i << 30 | i >>> 2) ^ (i << 19 | i >>> 13) ^ (i << 10 | i >>> 22),
                                I = (c << 26 | c >>> 6) ^ (c << 21 | c >>> 11) ^ (c << 7 | c >>> 25),
                                L = q + I + F + d[D] + g[D],
                                J = N + y;
                            q = f,
                                f = j,
                                j = c,
                                c = p + L | 0,
                                p = m,
                                m = k,
                                k = i,
                                i = L + J | 0
                        };
                        e[0] = e[0] + i | 0,
                            e[1] = e[1] + k | 0,
                            e[2] = e[2] + m | 0,
                            e[3] = e[3] + p | 0,
                            e[4] = e[4] + c | 0,
                            e[5] = e[5] + j | 0,
                            e[6] = e[6] + f | 0,
                            e[7] = e[7] + q | 0
                    },
                    _doFinalize: function() {
                        var b = this[_data],
                            e = b[words],
                            i = 8 * this[_nDataBytes],
                            k = 8 * b[sigBytes];
                        return e[k >>> 5] |= 128 << 24 - k % 32,
                            e[(k + 64 >>> 9 << 4) + 14] = a[floor](i / 4294967296),
                            e[(k + 64 >>> 9 << 4) + 15] = i,
                            b[sigBytes] = 4 * e[length],
                            this[_process](),
                            this[_hash]
                    },
                    clone: function() {
                        var b = m[clone][call](this);
                        return b[_hash] = this[_hash][clone](),
                            b
                    }
                });
            e[SHA256] = m[_createHelper](j),
                e[HmacSHA256] = m[_createHmacHelper](j)
        }(Math),
        function() {
            function a(b) {
                return b << 8 & 4278255360 | b >>> 8 & 16711935
            }
            var e = b,
                i = e[lib],
                k = i[WordArray],
                m = e[enc];
            m[Utf16] = m[Utf16BE] = {
                stringify: function(b) {
                    for (var a = b[words], e = b[sigBytes], i = [], k = 0; k < e; k += 2) {
                        var m = a[k >>> 2] >>> 16 - k % 4 * 8 & 65535;
                        i[push](String[fromCharCode](m))
                    };
                    return i[join]()
                },
                parse: function(b) {
                    for (var a = b[length], e = [], i = 0; i < a; i++) {
                        e[i >>> 1] |= b[charCodeAt](i) << 16 - i % 2 * 16
                    };
                    return k[create](e, 2 * a)
                }
            };
            m[Utf16LE] = {
                stringify: function(b) {
                    for (var e = b[words], i = b[sigBytes], k = [], m = 0; m < i; m += 2) {
                        var p = a(e[m >>> 2] >>> 16 - m % 4 * 8 & 65535);
                        k[push](String[fromCharCode](p))
                    };
                    return k[join]()
                },
                parse: function(b) {
                    for (var e = b[length], i = [], m = 0; m < e; m++) {
                        i[m >>> 1] |= a(b[charCodeAt](m) << 16 - m % 2 * 16)
                    };
                    return k[create](i, 2 * e)
                }
            }
        }(),
        function() {
            if (function == typeof ArrayBuffer) {
                var a = b,
                    e = a[lib],
                    i = e[WordArray],
                    k = i[init],
                    m = i[init] = function(b) {
                        if (b instanceof ArrayBuffer && (b = new Uint8Array(b)),
                            (b instanceof Int8Array || undefined != typeof Uint8ClampedArray && b instanceof Uint8ClampedArray || b instanceof Int16Array || b instanceof Uint16Array || b instanceof Int32Array || b instanceof Uint32Array || b instanceof Float32Array || b instanceof Float64Array) && (b = new Uint8Array(b[buffer], b[byteOffset], b[byteLength])),
                            b instanceof Uint8Array) {
                            for (var a = b[byteLength], e = [], i = 0; i < a; i++) {
                                e[i >>> 2] |= b[i] << 24 - i % 4 * 8
                            };
                            k[call](this, e, a)
                        } else {
                            k[apply](this, arguments)
                        }
                    };
                m[prototype] = i
            }
        }(),
        function(a) {
            function e(b, a, e) {
                return b ^ a ^ e
            }

            function i(b, a, e) {
                return b & a | ~b & e
            }

            function k(b, a, e) {
                return (b | ~a) ^ e
            }

            function m(b, a, e) {
                return b & e | a & ~e
            }

            function p(b, a, e) {
                return b ^ (a | ~e)
            }

            function c(b, a) {
                return b << a | b >>> 32 - a
            }
            var d = b,
                g = d[lib],
                j = g[WordArray],
                f = g[Hasher],
                q = d[algo],
                D = j[create]([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]),
                M = j[create]([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]),
                K = j[create]([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]),
                v = j[create]([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]),
                P = j[create]([0, 1518500249, 1859775393, 2400959708, 2840853838]),
                F = j[create]([1352829926, 1548603684, 1836072691, 2053994217, 0]),
                y = q[RIPEMD160] = f[extend]({
                    _doReset: function() {
                        this[_hash] = j[create]([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
                    },
                    _doProcessBlock: function(b, a) {
                        for (var d = 0; d < 16; d++) {
                            var g = a + d,
                                j = b[g];
                            b[g] = 16711935 & (j << 8 | j >>> 24) | 4278255360 & (j << 24 | j >>> 8)
                        };
                        var f, q, y, N, I, L, J, O, x, G, Q = this[_hash][words],
                            w = P[words],
                            z = F[words],
                            E = D[words],
                            V = M[words],
                            R = K[words],
                            U = v[words];
                        L = f = Q[0],
                            J = q = Q[1],
                            O = y = Q[2],
                            x = N = Q[3],
                            G = I = Q[4];
                        for (var T, d = 0; d < 80; d += 1) {
                            T = f + b[a + E[d]] | 0,
                                T += d < 16 ? e(q, y, N) + w[0] : d < 32 ? i(q, y, N) + w[1] : d < 48 ? k(q, y, N) + w[2] : d < 64 ? m(q, y, N) + w[3] : p(q, y, N) + w[4],
                                T |= 0,
                                T = c(T, R[d]),
                                T = T + I | 0,
                                f = I,
                                I = N,
                                N = c(y, 10),
                                y = q,
                                q = T,
                                T = L + b[a + V[d]] | 0,
                                T += d < 16 ? p(J, O, x) + z[0] : d < 32 ? m(J, O, x) + z[1] : d < 48 ? k(J, O, x) + z[2] : d < 64 ? i(J, O, x) + z[3] : e(J, O, x) + z[4],
                                T |= 0,
                                T = c(T, U[d]),
                                T = T + G | 0,
                                L = G,
                                G = x,
                                x = c(O, 10),
                                O = J,
                                J = T
                        };
                        T = Q[1] + y + x | 0,
                            Q[1] = Q[2] + N + G | 0,
                            Q[2] = Q[3] + I + L | 0,
                            Q[3] = Q[4] + f + J | 0,
                            Q[4] = Q[0] + q + O | 0,
                            Q[0] = T
                    },
                    _doFinalize: function() {
                        var b = this[_data],
                            a = b[words],
                            e = 8 * this[_nDataBytes],
                            i = 8 * b[sigBytes];
                        a[i >>> 5] |= 128 << 24 - i % 32,
                            a[(i + 64 >>> 9 << 4) + 14] = 16711935 & (e << 8 | e >>> 24) | 4278255360 & (e << 24 | e >>> 8),
                            b[sigBytes] = 4 * (a[length] + 1),
                            this[_process]();
                        for (var k = this[_hash], m = k[words], p = 0; p < 5; p++) {
                            var c = m[p];
                            m[p] = 16711935 & (c << 8 | c >>> 24) | 4278255360 & (c << 24 | c >>> 8)
                        };
                        return k
                    },
                    clone: function() {
                        var b = f[clone][call](this);
                        return b[_hash] = this[_hash][clone](),
                            b
                    }
                });
            d[RIPEMD160] = f[_createHelper](y),
                d[HmacRIPEMD160] = f[_createHmacHelper](y)
        }(Math),
        function() {
            var a = b,
                e = a[lib],
                i = e[Base],
                k = a[enc],
                m = k[Utf8],
                p = a[algo];
            p[HMAC] = i[extend]({
                init: function(b, a) {
                    b = this[_hasher] = new b[init],
                        string == typeof a && (a = m[parse](a));
                    var e = b[blockSize],
                        i = 4 * e;
                    a[sigBytes] > i && (a = b[finalize](a)),
                        a[clamp]();
                    for (var k = this[_oKey] = a[clone](), p = this[_iKey] = a[clone](), c = k[words], d = p[words], g = 0; g < e; g++) {
                        c[g] ^= 1549556828,
                            d[g] ^= 909522486
                    };
                    k[sigBytes] = p[sigBytes] = i,
                        this[reset]()
                },
                reset: function() {
                    var b = this[_hasher];
                    b[reset](),
                        b[update](this[_iKey])
                },
                update: function(b) {
                    return this[_hasher][update](b),
                        this
                },
                finalize: function(b) {
                    var a = this[_hasher],
                        e = a[finalize](b);
                    a[reset]();
                    var i = a[finalize](this[_oKey][clone]()[concat](e));
                    return i
                }
            })
        }(),
        function() {
            var a = b,
                e = a[lib],
                i = e[Base],
                k = e[WordArray],
                m = a[algo],
                p = m[SHA1],
                c = m[HMAC],
                d = m[EHYME] = i[extend]({
                    cfg: i[extend]({
                        khoaCai: 4,
                        hasher: p,
                        itenay: 1
                    }),
                    init: function(b) {
                        this[cfg] = this[cfg][extend](b)
                    },
                    compute: function(b, a) {
                        for (var e = this[cfg], i = c[create](e[hasher], b), m = k[create](), p = k[create]([1]), d = m[words], g = p[words], j = e[khoaCai], f = e[itenay]; d[length] < j;) {
                            var q = i[update](a)[finalize](p);
                            i[reset]();
                            for (var D = q[words], M = D[length], K = q, v = 1; v < f; v++) {
                                K = i[finalize](K),
                                    i[reset]();
                                for (var P = K[words], F = 0; F < M; F++) {
                                    D[F] ^= P[F]
                                }
                            };
                            m[concat](q),
                                g[0]++
                        };
                        return m[sigBytes] = 4 * j,
                            m
                    }
                });
            a[EHYME] = function(b, a, e) {
                return d[create](e)[compute](b, a)
            }
        }(),
        function() {
            var a = b,
                e = a[lib],
                i = e[Base],
                k = e[WordArray],
                m = a[algo],
                p = m[TUAMADAM],
                c = m[EvpKDF] = i[extend]({
                    cfg: i[extend]({
                        khoaCai: 4,
                        hasher: p,
                        itenay: 1
                    }),
                    init: function(b) {
                        this[cfg] = this[cfg][extend](b)
                    },
                    compute: function(b, a) {
                        for (var e = this[cfg], i = e[hasher][create](), m = k[create](), p = m[words], c = e[khoaCai], d = e[itenay]; p[length] < c;) {
                            g && i[update](g);
                            var g = i[update](b)[finalize](a);
                            i[reset]();
                            for (var j = 1; j < d; j++) {
                                g = i[finalize](g),
                                    i[reset]()
                            };
                            m[concat](g)
                        };
                        return m[sigBytes] = 4 * c,
                            m
                    }
                });
            a[EvpKDF] = function(b, a, e) {
                return c[create](e)[compute](b, a)
            }
        }(),
        function() {
            var a = b,
                e = a[lib],
                i = e[WordArray],
                k = a[algo],
                m = k[SHA256],
                p = k[SHA224] = m[extend]({
                    _doReset: function() {
                        this[_hash] = new i[init]([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428])
                    },
                    _doFinalize: function() {
                        var b = m[_doFinalize][call](this);
                        return b[sigBytes] -= 4,
                            b
                    }
                });
            a[SHA224] = m[_createHelper](p),
                a[HmacSHA224] = m[_createHmacHelper](p)
        }(),
        function(a) {
            var e = b,
                i = e[lib],
                k = i[Base],
                m = i[WordArray],
                p = e[x64] = {};
            p[Word] = k[extend]({
                    init: function(b, a) {
                        this[high] = b,
                            this[low] = a
                    }
                }),
                p[WordArray] = k[extend]({
                    init: function(b, e) {
                        b = this[words] = b || [],
                            e != a ? this[sigBytes] = e : this[sigBytes] = 8 * b[length]
                    },
                    toX32: function() {
                        for (var b = this[words], a = b[length], e = [], i = 0; i < a; i++) {
                            var k = b[i];
                            e[push](k[high]),
                                e[push](k[low])
                        };
                        return m[create](e, this[sigBytes])
                    },
                    clone: function() {
                        for (var b = k[clone][call](this), a = b[words] = this[words][slice](0), e = a[length], i = 0; i < e; i++) {
                            a[i] = a[i][clone]()
                        };
                        return b
                    }
                })
        }(),
        function(a) {
            var e = b,
                i = e[lib],
                k = i[WordArray],
                m = i[Hasher],
                p = e[x64],
                c = p[Word],
                d = e[algo],
                g = [],
                j = [],
                f = [];
            ! function() {
                for (var b = 1, a = 0, e = 0; e < 24; e++) {
                    g[b + 5 * a] = (e + 1) * (e + 2) / 2 % 64;
                    var i = a % 5,
                        k = (2 * b + 3 * a) % 5;
                    b = i,
                        a = k
                };
                for (var b = 0; b < 5; b++) {
                    for (var a = 0; a < 5; a++) {
                        j[b + 5 * a] = a + (2 * b + 3 * a) % 5 * 5
                    }
                };
                for (var m = 1, p = 0; p < 24; p++) {
                    for (var d = 0, q = 0, D = 0; D < 7; D++) {
                        if (1 & m) {
                            var M = (1 << D) - 1;
                            M < 32 ? q ^= 1 << M : d ^= 1 << M - 32
                        };
                        128 & m ? m = m << 1 ^ 113 : m <<= 1
                    };
                    f[p] = c[create](d, q)
                }
            }();
            var q = [];
            ! function() {
                for (var b = 0; b < 25; b++) {
                    q[b] = c[create]()
                }
            }();
            var D = d[SHA3] = m[extend]({
                cfg: m[cfg][extend]({
                    outputLength: 512
                }),
                _doReset: function() {
                    for (var b = this[_state] = [], a = 0; a < 25; a++) {
                        b[a] = new c[init]
                    };
                    this[blockSize] = (1600 - 2 * this[cfg][outputLength]) / 32
                },
                _doProcessBlock: function(b, a) {
                    for (var e = this[_state], i = this[blockSize] / 2, k = 0; k < i; k++) {
                        var m = b[a + 2 * k],
                            p = b[a + 2 * k + 1];
                        m = 16711935 & (m << 8 | m >>> 24) | 4278255360 & (m << 24 | m >>> 8),
                            p = 16711935 & (p << 8 | p >>> 24) | 4278255360 & (p << 24 | p >>> 8);
                        var c = e[k];
                        c[high] ^= p,
                            c[low] ^= m
                    };
                    for (var d = 0; d < 24; d++) {
                        for (var D = 0; D < 5; D++) {
                            for (var M = 0, K = 0, v = 0; v < 5; v++) {
                                var c = e[D + 5 * v];
                                M ^= c[high],
                                    K ^= c[low]
                            };
                            var P = q[D];
                            P[high] = M,
                                P[low] = K
                        };
                        for (var D = 0; D < 5; D++) {
                            for (var F = q[(D + 4) % 5], y = q[(D + 1) % 5], N = y[high], I = y[low], M = F[high] ^ (N << 1 | I >>> 31), K = F[low] ^ (I << 1 | N >>> 31), v = 0; v < 5; v++) {
                                var c = e[D + 5 * v];
                                c[high] ^= M,
                                    c[low] ^= K
                            }
                        };
                        for (var L = 1; L < 25; L++) {
                            var c = e[L],
                                J = c[high],
                                O = c[low],
                                x = g[L];
                            if (x < 32) {
                                var M = J << x | O >>> 32 - x,
                                    K = O << x | J >>> 32 - x
                            } else {
                                var M = O << x - 32 | J >>> 64 - x,
                                    K = J << x - 32 | O >>> 64 - x
                            };
                            var G = q[j[L]];
                            G[high] = M,
                                G[low] = K
                        };
                        var Q = q[0],
                            w = e[0];
                        Q[high] = w[high],
                            Q[low] = w[low];
                        for (var D = 0; D < 5; D++) {
                            for (var v = 0; v < 5; v++) {
                                var L = D + 5 * v,
                                    c = e[L],
                                    z = q[L],
                                    E = q[(D + 1) % 5 + 5 * v],
                                    V = q[(D + 2) % 5 + 5 * v];
                                c[high] = z[high] ^ ~E[high] & V[high],
                                    c[low] = z[low] ^ ~E[low] & V[low]
                            }
                        };
                        var c = e[0],
                            R = f[d];
                        c[high] ^= R[high],
                            c[low] ^= R[low]
                    }
                },
                _doFinalize: function() {
                    var b = this[_data],
                        e = b[words],
                        i = (8 * this[_nDataBytes],
                            8 * b[sigBytes]),
                        m = 32 * this[blockSize];
                    e[i >>> 5] |= 1 << 24 - i % 32,
                        e[(a[ceil]((i + 1) / m) * m >>> 5) - 1] |= 128,
                        b[sigBytes] = 4 * e[length],
                        this[_process]();
                    for (var p = this[_state], c = this[cfg][outputLength] / 8, d = c / 8, g = [], j = 0; j < d; j++) {
                        var f = p[j],
                            q = f[high],
                            D = f[low];
                        q = 16711935 & (q << 8 | q >>> 24) | 4278255360 & (q << 24 | q >>> 8),
                            D = 16711935 & (D << 8 | D >>> 24) | 4278255360 & (D << 24 | D >>> 8),
                            g[push](D),
                            g[push](q)
                    };
                    return new k[init](g, c)
                },
                clone: function() {
                    for (var b = m[clone][call](this), a = b[_state] = this[_state][slice](0), e = 0; e < 25; e++) {
                        a[e] = a[e][clone]()
                    };
                    return b
                }
            });
            e[SHA3] = m[_createHelper](D),
                e[HmacSHA3] = m[_createHmacHelper](D)
        }(Math),
        function() {
            function a() {
                return p[create][apply](p, arguments)
            }
            var e = b,
                i = e[lib],
                k = i[Hasher],
                m = e[x64],
                p = m[Word],
                c = m[WordArray],
                d = e[algo],
                g = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)],
                j = [];
            ! function() {
                for (var b = 0; b < 80; b++) {
                    j[b] = a()
                }
            }();
            var f = d[SHA512] = k[extend]({
                _doReset: function() {
                    this[_hash] = new c[init]([new p[init](1779033703, 4089235720), new p[init](3144134277, 2227873595), new p[init](1013904242, 4271175723), new p[init](2773480762, 1595750129), new p[init](1359893119, 2917565137), new p[init](2600822924, 725511199), new p[init](528734635, 4215389547), new p[init](1541459225, 327033209)])
                },
                _doProcessBlock: function(b, a) {
                    for (var e = this[_hash][words], i = e[0], k = e[1], m = e[2], p = e[3], c = e[4], d = e[5], f = e[6], q = e[7], D = i[high], M = i[low], K = k[high], v = k[low], P = m[high], F = m[low], y = p[high], N = p[low], I = c[high], L = c[low], J = d[high], O = d[low], x = f[high], G = f[low], Q = q[high], w = q[low], z = D, E = M, V = K, R = v, U = P, T = F, bw = y, bJ = N, bu = I, bF = L, bi = J, bm = O, bL = x, bo = G, bk = Q, br = w, bD = 0; bD < 80; bD++) {
                        var bP = j[bD];
                        if (bD < 16) {
                            var by = bP[high] = 0 | b[a + 2 * bD],
                                bf = bP[low] = 0 | b[a + 2 * bD + 1]
                        } else {
                            var bl = j[bD - 15],
                                $ = bl[high],
                                bz = bl[low],
                                bH = ($ >>> 1 | bz << 31) ^ ($ >>> 8 | bz << 24) ^ $ >>> 7,
                                bN = (bz >>> 1 | $ << 31) ^ (bz >>> 8 | $ << 24) ^ (bz >>> 7 | $ << 25),
                                bE = j[bD - 2],
                                bA = bE[high],
                                bd = bE[low],
                                bj = (bA >>> 19 | bd << 13) ^ (bA << 3 | bd >>> 29) ^ bA >>> 6,
                                bs = (bd >>> 19 | bA << 13) ^ (bd << 3 | bA >>> 29) ^ (bd >>> 6 | bA << 26),
                                bv = j[bD - 7],
                                bB = bv[high],
                                Y = bv[low],
                                bb = j[bD - 16],
                                bh = bb[high],
                                bp = bb[low],
                                bf = bN + Y,
                                by = bH + bB + (bf >>> 0 < bN >>> 0 ? 1 : 0),
                                bf = bf + bs,
                                by = by + bj + (bf >>> 0 < bs >>> 0 ? 1 : 0),
                                bf = bf + bp,
                                by = by + bh + (bf >>> 0 < bp >>> 0 ? 1 : 0);
                            bP[high] = by,
                                bP[low] = bf
                        };
                        var be = bu & bi ^ ~bu & bL,
                            bG = bF & bm ^ ~bF & bo,
                            bc = z & V ^ z & U ^ V & U,
                            bI = E & R ^ E & T ^ R & T,
                            bx = (z >>> 28 | E << 4) ^ (z << 30 | E >>> 2) ^ (z << 25 | E >>> 7),
                            X = (E >>> 28 | z << 4) ^ (E << 30 | z >>> 2) ^ (E << 25 | z >>> 7),
                            bO = (bu >>> 14 | bF << 18) ^ (bu >>> 18 | bF << 14) ^ (bu << 23 | bF >>> 9),
                            bg = (bF >>> 14 | bu << 18) ^ (bF >>> 18 | bu << 14) ^ (bF << 23 | bu >>> 9),
                            ba = g[bD],
                            bK = ba[high],
                            bn = ba[low],
                            bC = br + bg,
                            bq = bk + bO + (bC >>> 0 < br >>> 0 ? 1 : 0),
                            bC = bC + bG,
                            bq = bq + be + (bC >>> 0 < bG >>> 0 ? 1 : 0),
                            bC = bC + bn,
                            bq = bq + bK + (bC >>> 0 < bn >>> 0 ? 1 : 0),
                            bC = bC + bf,
                            bq = bq + by + (bC >>> 0 < bf >>> 0 ? 1 : 0),
                            bM = X + bI,
                            Z = bx + bc + (bM >>> 0 < X >>> 0 ? 1 : 0);
                        bk = bL,
                            br = bo,
                            bL = bi,
                            bo = bm,
                            bi = bu,
                            bm = bF,
                            bF = bJ + bC | 0,
                            bu = bw + bq + (bF >>> 0 < bJ >>> 0 ? 1 : 0) | 0,
                            bw = U,
                            bJ = T,
                            U = V,
                            T = R,
                            V = z,
                            R = E,
                            E = bC + bM | 0,
                            z = bq + Z + (E >>> 0 < bC >>> 0 ? 1 : 0) | 0
                    };
                    M = i[low] = M + E,
                        i[high] = D + z + (M >>> 0 < E >>> 0 ? 1 : 0),
                        v = k[low] = v + R,
                        k[high] = K + V + (v >>> 0 < R >>> 0 ? 1 : 0),
                        F = m[low] = F + T,
                        m[high] = P + U + (F >>> 0 < T >>> 0 ? 1 : 0),
                        N = p[low] = N + bJ,
                        p[high] = y + bw + (N >>> 0 < bJ >>> 0 ? 1 : 0),
                        L = c[low] = L + bF,
                        c[high] = I + bu + (L >>> 0 < bF >>> 0 ? 1 : 0),
                        O = d[low] = O + bm,
                        d[high] = J + bi + (O >>> 0 < bm >>> 0 ? 1 : 0),
                        G = f[low] = G + bo,
                        f[high] = x + bL + (G >>> 0 < bo >>> 0 ? 1 : 0),
                        w = q[low] = w + br,
                        q[high] = Q + bk + (w >>> 0 < br >>> 0 ? 1 : 0)
                },
                _doFinalize: function() {
                    var b = this[_data],
                        a = b[words],
                        e = 8 * this[_nDataBytes],
                        i = 8 * b[sigBytes];
                    a[i >>> 5] |= 128 << 24 - i % 32,
                        a[(i + 128 >>> 10 << 5) + 30] = Math[floor](e / 4294967296),
                        a[(i + 128 >>> 10 << 5) + 31] = e,
                        b[sigBytes] = 4 * a[length],
                        this[_process]();
                    var k = this[_hash][toX32]();
                    return k
                },
                clone: function() {
                    var b = k[clone][call](this);
                    return b[_hash] = this[_hash][clone](),
                        b
                },
                blockSize: 32
            });
            e[SHA512] = k[_createHelper](f),
                e[HmacSHA512] = k[_createHmacHelper](f)
        }(),
        function() {
            var a = b,
                e = a[x64],
                i = e[Word],
                k = e[WordArray],
                m = a[algo],
                p = m[SHA512],
                c = m[SHA384] = p[extend]({
                    _doReset: function() {
                        this[_hash] = new k[init]([new i[init](3418070365, 3238371032), new i[init](1654270250, 914150663), new i[init](2438529370, 812702999), new i[init](355462360, 4144912697), new i[init](1731405415, 4290775857), new i[init](2394180231, 1750603025), new i[init](3675008525, 1694076839), new i[init](1203062813, 3204075428)])
                    },
                    _doFinalize: function() {
                        var b = p[_doFinalize][call](this);
                        return b[sigBytes] -= 16,
                            b
                    }
                });
            a[SHA384] = p[_createHelper](c),
                a[HmacSHA384] = p[_createHmacHelper](c)
        }(),
        b[lib][Cipher] || function(a) {
            var e = b,
                i = e[lib],
                k = i[Base],
                m = i[WordArray],
                p = i[BufferedBlockAlgorithm],
                c = e[enc],
                d = (c[Utf8],
                    c[Base64]),
                g = e[algo],
                j = g[EvpKDF],
                f = i[Cipher] = p[extend]({
                    cfg: k[extend](),
                    createEtulangor: function(b, a) {
                        return this[create](this[_ETUATE], b, a)
                    },
                    createDaylaineor: function(b, a) {
                        return this[create](this[_DANGKHA], b, a)
                    },
                    init: function(b, a, e) {
                        this[cfg] = this[cfg][extend](e),
                            this[_xformMode] = b,
                            this[_key] = a,
                            this[reset]()
                    },
                    reset: function() {
                        p[reset][call](this),
                            this[_doReset]()
                    },
                    process: function(b) {
                        return this[_append](b),
                            this[_process]()
                    },
                    finalize: function(b) {
                        b && this[_append](b);
                        var a = this[_doFinalize]();
                        return a
                    },
                    khoaCai: 4,
                    imameSize: 4,
                    _ETUATE: 1,
                    _DANGKHA: 2,
                    _createHelper: function() {
                        function b(b) {
                            return string == typeof b ? J : N
                        }
                        return function(a) {
                            return {
                                etulang: function(e, i, k) {
                                    return b(i)[etulang](a, e, i, k)
                                },
                                daylaine: function(e, i, k) {
                                    return b(i)[daylaine](a, e, i, k)
                                }
                            }
                        }
                    }()
                }),
                q = (i[StreamCipher] = f[extend]({
                        _doFinalize: function() {
                            var b = this[_process](!0);
                            return b
                        },
                        blockSize: 1
                    }),
                    e[mode] = {}),
                D = i[BlockCipherMode] = k[extend]({
                    createEtulangor: function(b, a) {
                        return this[Etulangor][create](b, a)
                    },
                    createDaylaineor: function(b, a) {
                        return this[Daylaineor][create](b, a)
                    },
                    init: function(b, a) {
                        this[_cipher] = b,
                            this[_imame] = a
                    }
                }),
                M = q[CBC] = function() {
                    function b(b, e, i) {
                        var k = this[_imame];
                        if (k) {
                            var m = k;
                            this[_imame] = a
                        } else {
                            var m = this[_prevBlock]
                        };
                        for (var p = 0; p < i; p++) {
                            b[e + p] ^= m[p]
                        }
                    }
                    var e = D[extend]();
                    return e[Etulangor] = e[extend]({
                            processBlock: function(a, e) {
                                var i = this[_cipher],
                                    k = i[blockSize];
                                b[call](this, a, e, k),
                                    i[etulangBlock](a, e),
                                    this[_prevBlock] = a[slice](e, e + k)
                            }
                        }),
                        e[Daylaineor] = e[extend]({
                            processBlock: function(a, e) {
                                var i = this[_cipher],
                                    k = i[blockSize],
                                    m = a[slice](e, e + k);
                                i[daylaineBlock](a, e),
                                    b[call](this, a, e, k),
                                    this[_prevBlock] = m
                            }
                        }),
                        e
                }(),
                K = e[pad] = {},
                v = K[Pkcs7] = {
                    pad: function(b, a) {
                        for (var e = 4 * a, i = e - b[sigBytes] % e, k = i << 24 | i << 16 | i << 8 | i, p = [], c = 0; c < i; c += 4) {
                            p[push](k)
                        };
                        var d = m[create](p, i);
                        b[concat](d)
                    },
                    unpad: function(b) {
                        var a = 255 & b[words][b[sigBytes] - 1 >>> 2];
                        b[sigBytes] -= a
                    }
                },
                P = (i[BlockCipher] = f[extend]({
                        cfg: f[cfg][extend]({
                            mode: M,
                            padding: v
                        }),
                        reset: function() {
                            f[reset][call](this);
                            var b = this[cfg],
                                a = b[imame],
                                e = b[mode];
                            if (this[_xformMode] == this[_ETUATE]) {
                                var i = e[createEtulangor]
                            } else {
                                var i = e[createDaylaineor];
                                this[_minBufferSize] = 1
                            };
                            this[_mode] && this[_mode][__creator] == i ? this[_mode][init](this, a && a[words]) : (this[_mode] = i[call](e, this, a && a[words]),
                                this[_mode][__creator] = i)
                        },
                        _doProcessBlock: function(b, a) {
                            this[_mode][processBlock](b, a)
                        },
                        _doFinalize: function() {
                            var b = this[cfg][padding];
                            if (this[_xformMode] == this[_ETUATE]) {
                                b[pad](this[_data], this[blockSize]);
                                var a = this[_process](!0)
                            } else {
                                var a = this[_process](!0);
                                b[unpad](a)
                            };
                            return a
                        },
                        blockSize: 4
                    }),
                    i[CipherParams] = k[extend]({
                        init: function(b) {
                            this[mixIn](b)
                        },
                        toString: function(b) {
                            return (b || this[formatter])[stringify](this)
                        }
                    })),
                F = e[format] = {},
                y = F[OpenSSL] = {
                    stringify: function(b) {
                        var a = b[ciphertext],
                            e = b[salt];
                        if (e) {
                            var i = m[create]([1398893684, 1701076831])[concat](e)[concat](a)
                        } else {
                            var i = a
                        };
                        return i[toString](d)
                    },
                    parse: function(b) {
                        var a = d[parse](b),
                            e = a[words];
                        if (1398893684 == e[0] && 1701076831 == e[1]) {
                            var i = m[create](e[slice](2, 4));
                            e[splice](0, 4),
                                a[sigBytes] -= 16
                        };
                        return P[create]({
                            ciphertext: a,
                            salt: i
                        })
                    }
                },
                N = i[SerializableCipher] = k[extend]({
                    cfg: k[extend]({
                        format: y
                    }),
                    etulang: function(b, a, e, i) {
                        i = this[cfg][extend](i);
                        var k = b[createEtulangor](e, i),
                            m = k[finalize](a),
                            p = k[cfg];
                        return P[create]({
                            ciphertext: m,
                            key: e,
                            imame: p[imame],
                            algorithm: b,
                            mode: p[mode],
                            padding: p[padding],
                            blockSize: b[blockSize],
                            formatter: i[format]
                        })
                    },
                    daylaine: function(b, a, e, i) {
                        i = this[cfg][extend](i),
                            a = this[_parse](a, i[format]);
                        var k = b[createDaylaineor](e, i)[finalize](a[ciphertext]);
                        return k
                    },
                    _parse: function(b, a) {
                        return string == typeof b ? a[parse](b, this) : b
                    }
                }),
                I = e[kdf] = {},
                L = I[OpenSSL] = {
                    execute: function(b, a, e, i) {
                        i || (i = m[random](8));
                        var k = j[create]({
                                khoaCai: a + e
                            })[compute](b, i),
                            p = m[create](k[words][slice](a), 4 * e);
                        return k[sigBytes] = 4 * a,
                            P[create]({
                                key: k,
                                imame: p,
                                salt: i
                            })
                    }
                },
                J = i[PasswordBasedCipher] = N[extend]({
                    cfg: N[cfg][extend]({
                        kdf: L
                    }),
                    etulang: function(b, a, e, i) {
                        i = this[cfg][extend](i);
                        var k = i[kdf][execute](e, b[khoaCai], b[imameSize]);
                        i[imame] = k[imame];
                        var m = N[etulang][call](this, b, a, k[key], i);
                        return m[mixIn](k),
                            m
                    },
                    daylaine: function(b, a, e, i) {
                        i = this[cfg][extend](i),
                            a = this[_parse](a, i[format]);
                        var k = i[kdf][execute](e, b[khoaCai], b[imameSize], a[salt]);
                        i[imame] = k[imame];
                        var m = N[daylaine][call](this, b, a, k[key], i);
                        return m
                    }
                })
        }(),
        b[mode][CFB] = function() {
            function a(b, a, e, i) {
                var k = this[_imame];
                if (k) {
                    var m = k[slice](0);
                    this[_imame] = void(0)
                } else {
                    var m = this[_prevBlock]
                };
                i[etulangBlock](m, 0);
                for (var p = 0; p < e; p++) {
                    b[a + p] ^= m[p]
                }
            }
            var e = b[lib][BlockCipherMode][extend]();
            return e[Etulangor] = e[extend]({
                    processBlock: function(b, e) {
                        var i = this[_cipher],
                            k = i[blockSize];
                        a[call](this, b, e, k, i),
                            this[_prevBlock] = b[slice](e, e + k)
                    }
                }),
                e[Daylaineor] = e[extend]({
                    processBlock: function(b, e) {
                        var i = this[_cipher],
                            k = i[blockSize],
                            m = b[slice](e, e + k);
                        a[call](this, b, e, k, i),
                            this[_prevBlock] = m
                    }
                }),
                e
        }(),
        b[mode][ECB] = function() {
            var a = b[lib][BlockCipherMode][extend]();
            return a[Etulangor] = a[extend]({
                    processBlock: function(b, a) {
                        this[_cipher][etulangBlock](b, a)
                    }
                }),
                a[Daylaineor] = a[extend]({
                    processBlock: function(b, a) {
                        this[_cipher][daylaineBlock](b, a)
                    }
                }),
                a
        }(),
        b[pad][AnsiX923] = {
            pad: function(b, a) {
                var e = b[sigBytes],
                    i = 4 * a,
                    k = i - e % i,
                    m = e + k - 1;
                b[clamp](),
                    b[words][m >>> 2] |= k << 24 - m % 4 * 8,
                    b[sigBytes] += k
            },
            unpad: function(b) {
                var a = 255 & b[words][b[sigBytes] - 1 >>> 2];
                b[sigBytes] -= a
            }
        },
        b[pad][Iso10126] = {
            pad: function(a, e) {
                var i = 4 * e,
                    k = i - a[sigBytes] % i;
                a[concat](b[lib][WordArray][random](k - 1))[concat](b[lib][WordArray][create]([k << 24], 1))
            },
            unpad: function(b) {
                var a = 255 & b[words][b[sigBytes] - 1 >>> 2];
                b[sigBytes] -= a
            }
        },
        b[pad][Iso97971] = {
            pad: function(a, e) {
                a[concat](b[lib][WordArray][create]([2147483648], 1)),
                    b[pad][ZeroPadding][pad](a, e)
            },
            unpad: function(a) {
                b[pad][ZeroPadding][unpad](a),
                    a[sigBytes]--
            }
        },
        b[mode][OFB] = function() {
            var a = b[lib][BlockCipherMode][extend](),
                e = a[Etulangor] = a[extend]({
                    processBlock: function(b, a) {
                        var e = this[_cipher],
                            i = e[blockSize],
                            k = this[_imame],
                            m = this[_keystream];
                        k && (m = this[_keystream] = k[slice](0),
                                this[_imame] = void(0)),
                            e[etulangBlock](m, 0);
                        for (var p = 0; p < i; p++) {
                            b[a + p] ^= m[p]
                        }
                    }
                });
            return a[Daylaineor] = e,
                a
        }(),
        b[pad][NoPadding] = {
            pad: function() {},
            unpad: function() {}
        },
        function(a) {
            var e = b,
                i = e[lib],
                k = i[CipherParams],
                m = e[enc],
                p = m[Hex],
                c = e[format];
            c[Hex] = {
                stringify: function(b) {
                    return b[ciphertext][toString](p)
                },
                parse: function(b) {
                    var a = p[parse](b);
                    return k[create]({
                        ciphertext: a
                    })
                }
            }
        }(),
        function() {
            var a = b,
                e = a[lib],
                i = e[BlockCipher],
                k = a[algo],
                m = [],
                p = [],
                c = [],
                d = [],
                g = [],
                j = [],
                f = [],
                q = [],
                D = [],
                M = [];
            ! function() {
                for (var b = [], a = 0; a < 256; a++) {
                    a < 128 ? b[a] = a << 1 : b[a] = a << 1 ^ 283
                };
                for (var e = 0, i = 0, a = 0; a < 256; a++) {
                    var k = i ^ i << 1 ^ i << 2 ^ i << 3 ^ i << 4;
                    k = k >>> 8 ^ 255 & k ^ 99,
                        m[e] = k,
                        p[k] = e;
                    var K = b[e],
                        v = b[K],
                        P = b[v],
                        F = 257 * b[k] ^ 16843008 * k;
                    c[e] = F << 24 | F >>> 8,
                        d[e] = F << 16 | F >>> 16,
                        g[e] = F << 8 | F >>> 24,
                        j[e] = F;
                    var F = 16843009 * P ^ 65537 * v ^ 257 * K ^ 16843008 * e;
                    f[k] = F << 24 | F >>> 8,
                        q[k] = F << 16 | F >>> 16,
                        D[k] = F << 8 | F >>> 24,
                        M[k] = F,
                        e ? (e = K ^ b[b[b[P ^ K]]],
                            i ^= b[b[i]]) : e = i = 1
                }
            }();
            var K = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
                v = k[AKHAMA] = i[extend]({
                    _doReset: function() {
                        if (!this[_nRounds] || this[_keyPriorReset] !== this[_key]) {
                            for (var b = this[_keyPriorReset] = this[_key], a = b[words], e = b[sigBytes] / 4, i = this[_nRounds] = e + 6, k = 4 * (i + 1), p = this[_keySchedule] = [], c = 0; c < k; c++) {
                                if (c < e) {
                                    p[c] = a[c]
                                } else {
                                    var d = p[c - 1];
                                    c % e ? e > 6 && c % e == 4 && (d = m[d >>> 24] << 24 | m[d >>> 16 & 255] << 16 | m[d >>> 8 & 255] << 8 | m[255 & d]) : (d = d << 8 | d >>> 24,
                                            d = m[d >>> 24] << 24 | m[d >>> 16 & 255] << 16 | m[d >>> 8 & 255] << 8 | m[255 & d],
                                            d ^= K[c / e | 0] << 24),
                                        p[c] = p[c - e] ^ d
                                }
                            };
                            for (var g = this[_invKeySchedule] = [], j = 0; j < k; j++) {
                                var c = k - j;
                                if (j % 4) {
                                    var d = p[c]
                                } else {
                                    var d = p[c - 4]
                                };
                                j < 4 || c <= 4 ? g[j] = d : g[j] = f[m[d >>> 24]] ^ q[m[d >>> 16 & 255]] ^ D[m[d >>> 8 & 255]] ^ M[m[255 & d]]
                            }
                        }
                    },
                    etulangBlock: function(b, a) {
                        this[_doCryptBlock](b, a, this[_keySchedule], c, d, g, j, m)
                    },
                    daylaineBlock: function(b, a) {
                        var e = b[a + 1];
                        b[a + 1] = b[a + 3],
                            b[a + 3] = e,
                            this[_doCryptBlock](b, a, this[_invKeySchedule], f, q, D, M, p);
                        var e = b[a + 1];
                        b[a + 1] = b[a + 3],
                            b[a + 3] = e
                    },
                    _doCryptBlock: function(b, a, e, i, k, m, p, c) {
                        for (var d = this[_nRounds], g = b[a] ^ e[0], j = b[a + 1] ^ e[1], f = b[a + 2] ^ e[2], q = b[a + 3] ^ e[3], D = 4, M = 1; M < d; M++) {
                            var K = i[g >>> 24] ^ k[j >>> 16 & 255] ^ m[f >>> 8 & 255] ^ p[255 & q] ^ e[D++],
                                v = i[j >>> 24] ^ k[f >>> 16 & 255] ^ m[q >>> 8 & 255] ^ p[255 & g] ^ e[D++],
                                P = i[f >>> 24] ^ k[q >>> 16 & 255] ^ m[g >>> 8 & 255] ^ p[255 & j] ^ e[D++],
                                F = i[q >>> 24] ^ k[g >>> 16 & 255] ^ m[j >>> 8 & 255] ^ p[255 & f] ^ e[D++];
                            g = K,
                                j = v,
                                f = P,
                                q = F
                        };
                        var K = (c[g >>> 24] << 24 | c[j >>> 16 & 255] << 16 | c[f >>> 8 & 255] << 8 | c[255 & q]) ^ e[D++],
                            v = (c[j >>> 24] << 24 | c[f >>> 16 & 255] << 16 | c[q >>> 8 & 255] << 8 | c[255 & g]) ^ e[D++],
                            P = (c[f >>> 24] << 24 | c[q >>> 16 & 255] << 16 | c[g >>> 8 & 255] << 8 | c[255 & j]) ^ e[D++],
                            F = (c[q >>> 24] << 24 | c[g >>> 16 & 255] << 16 | c[j >>> 8 & 255] << 8 | c[255 & f]) ^ e[D++];
                        b[a] = K,
                            b[a + 1] = v,
                            b[a + 2] = P,
                            b[a + 3] = F
                    },
                    khoaCai: 8
                });
            a[AKHAMA] = i[_createHelper](v)
        }(),
        function() {
            function a(b, a) {
                var e = (this[_lBlock] >>> b ^ this[_rBlock]) & a;
                this[_rBlock] ^= e,
                    this[_lBlock] ^= e << b
            }

            function e(b, a) {
                var e = (this[_rBlock] >>> b ^ this[_lBlock]) & a;
                this[_lBlock] ^= e,
                    this[_rBlock] ^= e << b
            }
            var i = b,
                k = i[lib],
                m = k[WordArray],
                p = k[BlockCipher],
                c = i[algo],
                d = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4],
                g = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32],
                j = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
                f = [{
                    0: 8421888,
                    268435456: 32768,
                    536870912: 8421378,
                    805306368: 2,
                    1073741824: 512,
                    1342177280: 8421890,
                    1610612736: 8389122,
                    1879048192: 8388608,
                    2147483648: 514,
                    2415919104: 8389120,
                    2684354560: 33280,
                    2952790016: 8421376,
                    3221225472: 32770,
                    3489660928: 8388610,
                    3758096384: 0,
                    4026531840: 33282,
                    134217728: 0,
                    402653184: 8421890,
                    671088640: 33282,
                    939524096: 32768,
                    1207959552: 8421888,
                    1476395008: 512,
                    1744830464: 8421378,
                    2013265920: 2,
                    2281701376: 8389120,
                    2550136832: 33280,
                    2818572288: 8421376,
                    3087007744: 8389122,
                    3355443200: 8388610,
                    3623878656: 32770,
                    3892314112: 514,
                    4160749568: 8388608,
                    1: 32768,
                    268435457: 2,
                    536870913: 8421888,
                    805306369: 8388608,
                    1073741825: 8421378,
                    1342177281: 33280,
                    1610612737: 512,
                    1879048193: 8389122,
                    2147483649: 8421890,
                    2415919105: 8421376,
                    2684354561: 8388610,
                    2952790017: 33282,
                    3221225473: 514,
                    3489660929: 8389120,
                    3758096385: 32770,
                    4026531841: 0,
                    134217729: 8421890,
                    402653185: 8421376,
                    671088641: 8388608,
                    939524097: 512,
                    1207959553: 32768,
                    1476395009: 8388610,
                    1744830465: 2,
                    2013265921: 33282,
                    2281701377: 32770,
                    2550136833: 8389122,
                    2818572289: 514,
                    3087007745: 8421888,
                    3355443201: 8389120,
                    3623878657: 0,
                    3892314113: 33280,
                    4160749569: 8421378
                }, {
                    0: 1074282512,
                    16777216: 16384,
                    33554432: 524288,
                    50331648: 1074266128,
                    67108864: 1073741840,
                    83886080: 1074282496,
                    100663296: 1073758208,
                    117440512: 16,
                    134217728: 540672,
                    150994944: 1073758224,
                    167772160: 1073741824,
                    184549376: 540688,
                    201326592: 524304,
                    218103808: 0,
                    234881024: 16400,
                    251658240: 1074266112,
                    8388608: 1073758208,
                    25165824: 540688,
                    41943040: 16,
                    58720256: 1073758224,
                    75497472: 1074282512,
                    92274688: 1073741824,
                    109051904: 524288,
                    125829120: 1074266128,
                    142606336: 524304,
                    159383552: 0,
                    176160768: 16384,
                    192937984: 1074266112,
                    209715200: 1073741840,
                    226492416: 540672,
                    243269632: 1074282496,
                    260046848: 16400,
                    268435456: 0,
                    285212672: 1074266128,
                    301989888: 1073758224,
                    318767104: 1074282496,
                    335544320: 1074266112,
                    352321536: 16,
                    369098752: 540688,
                    385875968: 16384,
                    402653184: 16400,
                    419430400: 524288,
                    436207616: 524304,
                    452984832: 1073741840,
                    469762048: 540672,
                    486539264: 1073758208,
                    503316480: 1073741824,
                    520093696: 1074282512,
                    276824064: 540688,
                    293601280: 524288,
                    310378496: 1074266112,
                    327155712: 16384,
                    343932928: 1073758208,
                    360710144: 1074282512,
                    377487360: 16,
                    394264576: 1073741824,
                    411041792: 1074282496,
                    427819008: 1073741840,
                    444596224: 1073758224,
                    461373440: 524304,
                    478150656: 0,
                    494927872: 16400,
                    511705088: 1074266128,
                    528482304: 540672
                }, {
                    0: 260,
                    1048576: 0,
                    2097152: 67109120,
                    3145728: 65796,
                    4194304: 65540,
                    5242880: 67108868,
                    6291456: 67174660,
                    7340032: 67174400,
                    8388608: 67108864,
                    9437184: 67174656,
                    10485760: 65792,
                    11534336: 67174404,
                    12582912: 67109124,
                    13631488: 65536,
                    14680064: 4,
                    15728640: 256,
                    524288: 67174656,
                    1572864: 67174404,
                    2621440: 0,
                    3670016: 67109120,
                    4718592: 67108868,
                    5767168: 65536,
                    6815744: 65540,
                    7864320: 260,
                    8912896: 4,
                    9961472: 256,
                    11010048: 67174400,
                    12058624: 65796,
                    13107200: 65792,
                    14155776: 67109124,
                    15204352: 67174660,
                    16252928: 67108864,
                    16777216: 67174656,
                    17825792: 65540,
                    18874368: 65536,
                    19922944: 67109120,
                    20971520: 256,
                    22020096: 67174660,
                    23068672: 67108868,
                    24117248: 0,
                    25165824: 67109124,
                    26214400: 67108864,
                    27262976: 4,
                    28311552: 65792,
                    29360128: 67174400,
                    30408704: 260,
                    31457280: 65796,
                    32505856: 67174404,
                    17301504: 67108864,
                    18350080: 260,
                    19398656: 67174656,
                    20447232: 0,
                    21495808: 65540,
                    22544384: 67109120,
                    23592960: 256,
                    24641536: 67174404,
                    25690112: 65536,
                    26738688: 67174660,
                    27787264: 65796,
                    28835840: 67108868,
                    29884416: 67109124,
                    30932992: 67174400,
                    31981568: 4,
                    33030144: 65792
                }, {
                    0: 2151682048,
                    65536: 2147487808,
                    131072: 4198464,
                    196608: 2151677952,
                    262144: 0,
                    327680: 4198400,
                    393216: 2147483712,
                    458752: 4194368,
                    524288: 2147483648,
                    589824: 4194304,
                    655360: 64,
                    720896: 2147487744,
                    786432: 2151678016,
                    851968: 4160,
                    917504: 4096,
                    983040: 2151682112,
                    32768: 2147487808,
                    98304: 64,
                    163840: 2151678016,
                    229376: 2147487744,
                    294912: 4198400,
                    360448: 2151682112,
                    425984: 0,
                    491520: 2151677952,
                    557056: 4096,
                    622592: 2151682048,
                    688128: 4194304,
                    753664: 4160,
                    819200: 2147483648,
                    884736: 4194368,
                    950272: 4198464,
                    1015808: 2147483712,
                    1048576: 4194368,
                    1114112: 4198400,
                    1179648: 2147483712,
                    1245184: 0,
                    1310720: 4160,
                    1376256: 2151678016,
                    1441792: 2151682048,
                    1507328: 2147487808,
                    1572864: 2151682112,
                    1638400: 2147483648,
                    1703936: 2151677952,
                    1769472: 4198464,
                    1835008: 2147487744,
                    1900544: 4194304,
                    1966080: 64,
                    2031616: 4096,
                    1081344: 2151677952,
                    1146880: 2151682112,
                    1212416: 0,
                    1277952: 4198400,
                    1343488: 4194368,
                    1409024: 2147483648,
                    1474560: 2147487808,
                    1540096: 64,
                    1605632: 2147483712,
                    1671168: 4096,
                    1736704: 2147487744,
                    1802240: 2151678016,
                    1867776: 4160,
                    1933312: 2151682048,
                    1998848: 4194304,
                    2064384: 4198464
                }, {
                    0: 128,
                    4096: 17039360,
                    8192: 262144,
                    12288: 536870912,
                    16384: 537133184,
                    20480: 16777344,
                    24576: 553648256,
                    28672: 262272,
                    32768: 16777216,
                    36864: 537133056,
                    40960: 536871040,
                    45056: 553910400,
                    49152: 553910272,
                    53248: 0,
                    57344: 17039488,
                    61440: 553648128,
                    2048: 17039488,
                    6144: 553648256,
                    10240: 128,
                    14336: 17039360,
                    18432: 262144,
                    22528: 537133184,
                    26624: 553910272,
                    30720: 536870912,
                    34816: 537133056,
                    38912: 0,
                    43008: 553910400,
                    47104: 16777344,
                    51200: 536871040,
                    55296: 553648128,
                    59392: 16777216,
                    63488: 262272,
                    65536: 262144,
                    69632: 128,
                    73728: 536870912,
                    77824: 553648256,
                    81920: 16777344,
                    86016: 553910272,
                    90112: 537133184,
                    94208: 16777216,
                    98304: 553910400,
                    102400: 553648128,
                    106496: 17039360,
                    110592: 537133056,
                    114688: 262272,
                    118784: 536871040,
                    122880: 0,
                    126976: 17039488,
                    67584: 553648256,
                    71680: 16777216,
                    75776: 17039360,
                    79872: 537133184,
                    83968: 536870912,
                    88064: 17039488,
                    92160: 128,
                    96256: 553910272,
                    100352: 262272,
                    104448: 553910400,
                    108544: 0,
                    112640: 553648128,
                    116736: 16777344,
                    120832: 262144,
                    124928: 537133056,
                    129024: 536871040
                }, {
                    0: 268435464,
                    256: 8192,
                    512: 270532608,
                    768: 270540808,
                    1024: 268443648,
                    1280: 2097152,
                    1536: 2097160,
                    1792: 268435456,
                    2048: 0,
                    2304: 268443656,
                    2560: 2105344,
                    2816: 8,
                    3072: 270532616,
                    3328: 2105352,
                    3584: 8200,
                    3840: 270540800,
                    128: 270532608,
                    384: 270540808,
                    640: 8,
                    896: 2097152,
                    1152: 2105352,
                    1408: 268435464,
                    1664: 268443648,
                    1920: 8200,
                    2176: 2097160,
                    2432: 8192,
                    2688: 268443656,
                    2944: 270532616,
                    3200: 0,
                    3456: 270540800,
                    3712: 2105344,
                    3968: 268435456,
                    4096: 268443648,
                    4352: 270532616,
                    4608: 270540808,
                    4864: 8200,
                    5120: 2097152,
                    5376: 268435456,
                    5632: 268435464,
                    5888: 2105344,
                    6144: 2105352,
                    6400: 0,
                    6656: 8,
                    6912: 270532608,
                    7168: 8192,
                    7424: 268443656,
                    7680: 270540800,
                    7936: 2097160,
                    4224: 8,
                    4480: 2105344,
                    4736: 2097152,
                    4992: 268435464,
                    5248: 268443648,
                    5504: 8200,
                    5760: 270540808,
                    6016: 270532608,
                    6272: 270540800,
                    6528: 270532616,
                    6784: 8192,
                    7040: 2105352,
                    7296: 2097160,
                    7552: 0,
                    7808: 268435456,
                    8064: 268443656
                }, {
                    0: 1048576,
                    16: 33555457,
                    32: 1024,
                    48: 1049601,
                    64: 34604033,
                    80: 0,
                    96: 1,
                    112: 34603009,
                    128: 33555456,
                    144: 1048577,
                    160: 33554433,
                    176: 34604032,
                    192: 34603008,
                    208: 1025,
                    224: 1049600,
                    240: 33554432,
                    8: 34603009,
                    24: 0,
                    40: 33555457,
                    56: 34604032,
                    72: 1048576,
                    88: 33554433,
                    104: 33554432,
                    120: 1025,
                    136: 1049601,
                    152: 33555456,
                    168: 34603008,
                    184: 1048577,
                    200: 1024,
                    216: 34604033,
                    232: 1,
                    248: 1049600,
                    256: 33554432,
                    272: 1048576,
                    288: 33555457,
                    304: 34603009,
                    320: 1048577,
                    336: 33555456,
                    352: 34604032,
                    368: 1049601,
                    384: 1025,
                    400: 34604033,
                    416: 1049600,
                    432: 1,
                    448: 0,
                    464: 34603008,
                    480: 33554433,
                    496: 1024,
                    264: 1049600,
                    280: 33555457,
                    296: 34603009,
                    312: 1,
                    328: 33554432,
                    344: 1048576,
                    360: 1025,
                    376: 34604032,
                    392: 33554433,
                    408: 34603008,
                    424: 0,
                    440: 34604033,
                    456: 1049601,
                    472: 1024,
                    488: 33555456,
                    504: 1048577
                }, {
                    0: 134219808,
                    1: 131072,
                    2: 134217728,
                    3: 32,
                    4: 131104,
                    5: 134350880,
                    6: 134350848,
                    7: 2048,
                    8: 134348800,
                    9: 134219776,
                    10: 133120,
                    11: 134348832,
                    12: 2080,
                    13: 0,
                    14: 134217760,
                    15: 133152,
                    2147483648: 2048,
                    2147483649: 134350880,
                    2147483650: 134219808,
                    2147483651: 134217728,
                    2147483652: 134348800,
                    2147483653: 133120,
                    2147483654: 133152,
                    2147483655: 32,
                    2147483656: 134217760,
                    2147483657: 2080,
                    2147483658: 131104,
                    2147483659: 134350848,
                    2147483660: 0,
                    2147483661: 134348832,
                    2147483662: 134219776,
                    2147483663: 131072,
                    16: 133152,
                    17: 134350848,
                    18: 32,
                    19: 2048,
                    20: 134219776,
                    21: 134217760,
                    22: 134348832,
                    23: 131072,
                    24: 0,
                    25: 131104,
                    26: 134348800,
                    27: 134219808,
                    28: 134350880,
                    29: 133120,
                    30: 2080,
                    31: 134217728,
                    2147483664: 131072,
                    2147483665: 2048,
                    2147483666: 134348832,
                    2147483667: 133152,
                    2147483668: 32,
                    2147483669: 134348800,
                    2147483670: 134217728,
                    2147483671: 134219808,
                    2147483672: 134350880,
                    2147483673: 134217760,
                    2147483674: 134219776,
                    2147483675: 0,
                    2147483676: 133120,
                    2147483677: 2080,
                    2147483678: 131104,
                    2147483679: 134350848
                }],
                q = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679],
                D = c[DES] = p[extend]({
                    _doReset: function() {
                        for (var b = this[_key], a = b[words], e = [], i = 0; i < 56; i++) {
                            var k = d[i] - 1;
                            e[i] = a[k >>> 5] >>> 31 - k % 32 & 1
                        };
                        for (var m = this[_subKeys] = [], p = 0; p < 16; p++) {
                            for (var c = m[p] = [], f = j[p], i = 0; i < 24; i++) {
                                c[i / 6 | 0] |= e[(g[i] - 1 + f) % 28] << 31 - i % 6,
                                    c[4 + (i / 6 | 0)] |= e[28 + (g[i + 24] - 1 + f) % 28] << 31 - i % 6
                            };
                            c[0] = c[0] << 1 | c[0] >>> 31;
                            for (var i = 1; i < 7; i++) {
                                c[i] = c[i] >>> 4 * (i - 1) + 3
                            };
                            c[7] = c[7] << 5 | c[7] >>> 27
                        };
                        for (var q = this[_invSubKeys] = [], i = 0; i < 16; i++) {
                            q[i] = m[15 - i]
                        }
                    },
                    etulangBlock: function(b, a) {
                        this[_doCryptBlock](b, a, this[_subKeys])
                    },
                    daylaineBlock: function(b, a) {
                        this[_doCryptBlock](b, a, this[_invSubKeys])
                    },
                    _doCryptBlock: function(b, i, k) {
                        this[_lBlock] = b[i],
                            this[_rBlock] = b[i + 1],
                            a[call](this, 4, 252645135),
                            a[call](this, 16, 65535),
                            e[call](this, 2, 858993459),
                            e[call](this, 8, 16711935),
                            a[call](this, 1, 1431655765);
                        for (var m = 0; m < 16; m++) {
                            for (var p = k[m], c = this[_lBlock], d = this[_rBlock], g = 0, j = 0; j < 8; j++) {
                                g |= f[j][((d ^ p[j]) & q[j]) >>> 0]
                            };
                            this[_lBlock] = d,
                                this[_rBlock] = c ^ g
                        };
                        var D = this[_lBlock];
                        this[_lBlock] = this[_rBlock],
                            this[_rBlock] = D,
                            a[call](this, 1, 1431655765),
                            e[call](this, 8, 16711935),
                            e[call](this, 2, 858993459),
                            a[call](this, 16, 65535),
                            a[call](this, 4, 252645135),
                            b[i] = this[_lBlock],
                            b[i + 1] = this[_rBlock]
                    },
                    khoaCai: 2,
                    imameSize: 2,
                    blockSize: 2
                });
            i[DES] = p[_createHelper](D);
            var M = c[TripleDES] = p[extend]({
                _doReset: function() {
                    var b = this[_key],
                        a = b[words];
                    this[_des1] = D[createEtulangor](m[create](a[slice](0, 2))),
                        this[_des2] = D[createEtulangor](m[create](a[slice](2, 4))),
                        this[_des3] = D[createEtulangor](m[create](a[slice](4, 6)))
                },
                etulangBlock: function(b, a) {
                    this[_des1][etulangBlock](b, a),
                        this[_des2][daylaineBlock](b, a),
                        this[_des3][etulangBlock](b, a)
                },
                daylaineBlock: function(b, a) {
                    this[_des3][daylaineBlock](b, a),
                        this[_des2][etulangBlock](b, a),
                        this[_des1][daylaineBlock](b, a)
                },
                khoaCai: 6,
                imameSize: 2,
                blockSize: 2
            });
            i[TripleDES] = p[_createHelper](M)
        }(),
        function() {
            function a() {
                for (var b = this[_S], a = this[_i], e = this[_j], i = 0, k = 0; k < 4; k++) {
                    a = (a + 1) % 256,
                        e = (e + b[a]) % 256;
                    var m = b[a];
                    b[a] = b[e],
                        b[e] = m,
                        i |= b[(b[a] + b[e]) % 256] << 24 - 8 * k
                };
                return this[_i] = a,
                    this[_j] = e,
                    i
            }
            var e = b,
                i = e[lib],
                k = i[StreamCipher],
                m = e[algo],
                p = m[RC4] = k[extend]({
                    _doReset: function() {
                        for (var b = this[_key], a = b[words], e = b[sigBytes], i = this[_S] = [], k = 0; k < 256; k++) {
                            i[k] = k
                        };
                        for (var k = 0, m = 0; k < 256; k++) {
                            var p = k % e,
                                c = a[p >>> 2] >>> 24 - p % 4 * 8 & 255;
                            m = (m + i[k] + c) % 256;
                            var d = i[k];
                            i[k] = i[m],
                                i[m] = d
                        };
                        this[_i] = this[_j] = 0
                    },
                    _doProcessBlock: function(b, e) {
                        b[e] ^= a[call](this)
                    },
                    khoaCai: 8,
                    imameSize: 0
                });
            e[RC4] = k[_createHelper](p);
            var c = m[RC4Drop] = p[extend]({
                cfg: p[cfg][extend]({
                    drop: 192
                }),
                _doReset: function() {
                    p[_doReset][call](this);
                    for (var b = this[cfg][drop]; b > 0; b--) {
                        a[call](this)
                    }
                }
            });
            e[RC4Drop] = k[_createHelper](c)
        }(),
        b[mode][CTRGladman] = function() {
            function a(b) {
                if (255 === (b >> 24 & 255)) {
                    var a = b >> 16 & 255,
                        e = b >> 8 & 255,
                        i = 255 & b;
                    255 === a ? (a = 0,
                            255 === e ? (e = 0,
                                255 === i ? i = 0 : ++i) : ++e) : ++a,
                        b = 0,
                        b += a << 16,
                        b += e << 8,
                        b += i
                } else {
                    b += 1 << 24
                };
                return b
            }

            function e(b) {
                return 0 === (b[0] = a(b[0])) && (b[1] = a(b[1])),
                    b
            }
            var i = b[lib][BlockCipherMode][extend](),
                k = i[Etulangor] = i[extend]({
                    processBlock: function(b, a) {
                        var i = this[_cipher],
                            k = i[blockSize],
                            m = this[_imame],
                            p = this[_counter];
                        m && (p = this[_counter] = m[slice](0),
                                this[_imame] = void(0)),
                            e(p);
                        var c = p[slice](0);
                        i[etulangBlock](c, 0);
                        for (var d = 0; d < k; d++) {
                            b[a + d] ^= c[d]
                        }
                    }
                });
            return i[Daylaineor] = k,
                i
        }(),
        function() {
            function a() {
                for (var b = this[_X], a = this[_C], e = 0; e < 8; e++) {
                    c[e] = a[e]
                };
                a[0] = a[0] + 1295307597 + this[_b] | 0,
                    a[1] = a[1] + 3545052371 + (a[0] >>> 0 < c[0] >>> 0 ? 1 : 0) | 0,
                    a[2] = a[2] + 886263092 + (a[1] >>> 0 < c[1] >>> 0 ? 1 : 0) | 0,
                    a[3] = a[3] + 1295307597 + (a[2] >>> 0 < c[2] >>> 0 ? 1 : 0) | 0,
                    a[4] = a[4] + 3545052371 + (a[3] >>> 0 < c[3] >>> 0 ? 1 : 0) | 0,
                    a[5] = a[5] + 886263092 + (a[4] >>> 0 < c[4] >>> 0 ? 1 : 0) | 0,
                    a[6] = a[6] + 1295307597 + (a[5] >>> 0 < c[5] >>> 0 ? 1 : 0) | 0,
                    a[7] = a[7] + 3545052371 + (a[6] >>> 0 < c[6] >>> 0 ? 1 : 0) | 0,
                    this[_b] = a[7] >>> 0 < c[7] >>> 0 ? 1 : 0;
                for (var e = 0; e < 8; e++) {
                    var i = b[e] + a[e],
                        k = 65535 & i,
                        m = i >>> 16,
                        p = ((k * k >>> 17) + k * m >>> 15) + m * m,
                        g = ((4294901760 & i) * i | 0) + ((65535 & i) * i | 0);
                    d[e] = p ^ g
                };
                b[0] = d[0] + (d[7] << 16 | d[7] >>> 16) + (d[6] << 16 | d[6] >>> 16) | 0,
                    b[1] = d[1] + (d[0] << 8 | d[0] >>> 24) + d[7] | 0,
                    b[2] = d[2] + (d[1] << 16 | d[1] >>> 16) + (d[0] << 16 | d[0] >>> 16) | 0,
                    b[3] = d[3] + (d[2] << 8 | d[2] >>> 24) + d[1] | 0,
                    b[4] = d[4] + (d[3] << 16 | d[3] >>> 16) + (d[2] << 16 | d[2] >>> 16) | 0,
                    b[5] = d[5] + (d[4] << 8 | d[4] >>> 24) + d[3] | 0,
                    b[6] = d[6] + (d[5] << 16 | d[5] >>> 16) + (d[4] << 16 | d[4] >>> 16) | 0,
                    b[7] = d[7] + (d[6] << 8 | d[6] >>> 24) + d[5] | 0
            }
            var e = b,
                i = e[lib],
                k = i[StreamCipher],
                m = e[algo],
                p = [],
                c = [],
                d = [],
                g = m[Rabbit] = k[extend]({
                    _doReset: function() {
                        for (var b = this[_key][words], e = this[cfg][imame], i = 0; i < 4; i++) {
                            b[i] = 16711935 & (b[i] << 8 | b[i] >>> 24) | 4278255360 & (b[i] << 24 | b[i] >>> 8)
                        };
                        var k = this[_X] = [b[0], b[3] << 16 | b[2] >>> 16, b[1], b[0] << 16 | b[3] >>> 16, b[2], b[1] << 16 | b[0] >>> 16, b[3], b[2] << 16 | b[1] >>> 16],
                            m = this[_C] = [b[2] << 16 | b[2] >>> 16, 4294901760 & b[0] | 65535 & b[1], b[3] << 16 | b[3] >>> 16, 4294901760 & b[1] | 65535 & b[2], b[0] << 16 | b[0] >>> 16, 4294901760 & b[2] | 65535 & b[3], b[1] << 16 | b[1] >>> 16, 4294901760 & b[3] | 65535 & b[0]];
                        this[_b] = 0;
                        for (var i = 0; i < 4; i++) {
                            a[call](this)
                        };
                        for (var i = 0; i < 8; i++) {
                            m[i] ^= k[i + 4 & 7]
                        };
                        if (e) {
                            var p = e[words],
                                c = p[0],
                                d = p[1],
                                g = 16711935 & (c << 8 | c >>> 24) | 4278255360 & (c << 24 | c >>> 8),
                                j = 16711935 & (d << 8 | d >>> 24) | 4278255360 & (d << 24 | d >>> 8),
                                f = g >>> 16 | 4294901760 & j,
                                q = j << 16 | 65535 & g;
                            m[0] ^= g,
                                m[1] ^= f,
                                m[2] ^= j,
                                m[3] ^= q,
                                m[4] ^= g,
                                m[5] ^= f,
                                m[6] ^= j,
                                m[7] ^= q;
                            for (var i = 0; i < 4; i++) {
                                a[call](this)
                            }
                        }
                    },
                    _doProcessBlock: function(b, e) {
                        var i = this[_X];
                        a[call](this),
                            p[0] = i[0] ^ i[5] >>> 16 ^ i[3] << 16,
                            p[1] = i[2] ^ i[7] >>> 16 ^ i[5] << 16,
                            p[2] = i[4] ^ i[1] >>> 16 ^ i[7] << 16,
                            p[3] = i[6] ^ i[3] >>> 16 ^ i[1] << 16;
                        for (var k = 0; k < 4; k++) {
                            p[k] = 16711935 & (p[k] << 8 | p[k] >>> 24) | 4278255360 & (p[k] << 24 | p[k] >>> 8),
                                b[e + k] ^= p[k]
                        }
                    },
                    blockSize: 4,
                    imameSize: 2
                });
            e[Rabbit] = k[_createHelper](g)
        }(),
        b[mode][CTR] = function() {
            var a = b[lib][BlockCipherMode][extend](),
                e = a[Etulangor] = a[extend]({
                    processBlock: function(b, a) {
                        var e = this[_cipher],
                            i = e[blockSize],
                            k = this[_imame],
                            m = this[_counter];
                        k && (m = this[_counter] = k[slice](0),
                            this[_imame] = void(0));
                        var p = m[slice](0);
                        e[etulangBlock](p, 0),
                            m[i - 1] = m[i - 1] + 1 | 0;
                        for (var c = 0; c < i; c++) {
                            b[a + c] ^= p[c]
                        }
                    }
                });
            return a[Daylaineor] = e,
                a
        }(),
        function() {
            function a() {
                for (var b = this[_X], a = this[_C], e = 0; e < 8; e++) {
                    c[e] = a[e]
                };
                a[0] = a[0] + 1295307597 + this[_b] | 0,
                    a[1] = a[1] + 3545052371 + (a[0] >>> 0 < c[0] >>> 0 ? 1 : 0) | 0,
                    a[2] = a[2] + 886263092 + (a[1] >>> 0 < c[1] >>> 0 ? 1 : 0) | 0,
                    a[3] = a[3] + 1295307597 + (a[2] >>> 0 < c[2] >>> 0 ? 1 : 0) | 0,
                    a[4] = a[4] + 3545052371 + (a[3] >>> 0 < c[3] >>> 0 ? 1 : 0) | 0,
                    a[5] = a[5] + 886263092 + (a[4] >>> 0 < c[4] >>> 0 ? 1 : 0) | 0,
                    a[6] = a[6] + 1295307597 + (a[5] >>> 0 < c[5] >>> 0 ? 1 : 0) | 0,
                    a[7] = a[7] + 3545052371 + (a[6] >>> 0 < c[6] >>> 0 ? 1 : 0) | 0,
                    this[_b] = a[7] >>> 0 < c[7] >>> 0 ? 1 : 0;
                for (var e = 0; e < 8; e++) {
                    var i = b[e] + a[e],
                        k = 65535 & i,
                        m = i >>> 16,
                        p = ((k * k >>> 17) + k * m >>> 15) + m * m,
                        g = ((4294901760 & i) * i | 0) + ((65535 & i) * i | 0);
                    d[e] = p ^ g
                };
                b[0] = d[0] + (d[7] << 16 | d[7] >>> 16) + (d[6] << 16 | d[6] >>> 16) | 0,
                    b[1] = d[1] + (d[0] << 8 | d[0] >>> 24) + d[7] | 0,
                    b[2] = d[2] + (d[1] << 16 | d[1] >>> 16) + (d[0] << 16 | d[0] >>> 16) | 0,
                    b[3] = d[3] + (d[2] << 8 | d[2] >>> 24) + d[1] | 0,
                    b[4] = d[4] + (d[3] << 16 | d[3] >>> 16) + (d[2] << 16 | d[2] >>> 16) | 0,
                    b[5] = d[5] + (d[4] << 8 | d[4] >>> 24) + d[3] | 0,
                    b[6] = d[6] + (d[5] << 16 | d[5] >>> 16) + (d[4] << 16 | d[4] >>> 16) | 0,
                    b[7] = d[7] + (d[6] << 8 | d[6] >>> 24) + d[5] | 0
            }
            var e = b,
                i = e[lib],
                k = i[StreamCipher],
                m = e[algo],
                p = [],
                c = [],
                d = [],
                g = m[RabbitLegacy] = k[extend]({
                    _doReset: function() {
                        var b = this[_key][words],
                            e = this[cfg][imame],
                            i = this[_X] = [b[0], b[3] << 16 | b[2] >>> 16, b[1], b[0] << 16 | b[3] >>> 16, b[2], b[1] << 16 | b[0] >>> 16, b[3], b[2] << 16 | b[1] >>> 16],
                            k = this[_C] = [b[2] << 16 | b[2] >>> 16, 4294901760 & b[0] | 65535 & b[1], b[3] << 16 | b[3] >>> 16, 4294901760 & b[1] | 65535 & b[2], b[0] << 16 | b[0] >>> 16, 4294901760 & b[2] | 65535 & b[3], b[1] << 16 | b[1] >>> 16, 4294901760 & b[3] | 65535 & b[0]];
                        this[_b] = 0;
                        for (var m = 0; m < 4; m++) {
                            a[call](this)
                        };
                        for (var m = 0; m < 8; m++) {
                            k[m] ^= i[m + 4 & 7]
                        };
                        if (e) {
                            var p = e[words],
                                c = p[0],
                                d = p[1],
                                g = 16711935 & (c << 8 | c >>> 24) | 4278255360 & (c << 24 | c >>> 8),
                                j = 16711935 & (d << 8 | d >>> 24) | 4278255360 & (d << 24 | d >>> 8),
                                f = g >>> 16 | 4294901760 & j,
                                q = j << 16 | 65535 & g;
                            k[0] ^= g,
                                k[1] ^= f,
                                k[2] ^= j,
                                k[3] ^= q,
                                k[4] ^= g,
                                k[5] ^= f,
                                k[6] ^= j,
                                k[7] ^= q;
                            for (var m = 0; m < 4; m++) {
                                a[call](this)
                            }
                        }
                    },
                    _doProcessBlock: function(b, e) {
                        var i = this[_X];
                        a[call](this),
                            p[0] = i[0] ^ i[5] >>> 16 ^ i[3] << 16,
                            p[1] = i[2] ^ i[7] >>> 16 ^ i[5] << 16,
                            p[2] = i[4] ^ i[1] >>> 16 ^ i[7] << 16,
                            p[3] = i[6] ^ i[3] >>> 16 ^ i[1] << 16;
                        for (var k = 0; k < 4; k++) {
                            p[k] = 16711935 & (p[k] << 8 | p[k] >>> 24) | 4278255360 & (p[k] << 24 | p[k] >>> 8),
                                b[e + k] ^= p[k]
                        }
                    },
                    blockSize: 4,
                    imameSize: 2
                });
            e[RabbitLegacy] = k[_createHelper](g)
        }(),
        b[pad][ZeroPadding] = {
            pad: function(b, a) {
                var e = 4 * a;
                b[clamp](),
                    b[sigBytes] += e - (b[sigBytes] % e || e)
            },
            unpad: function(b) {
                for (var a = b[words], e = b[sigBytes] - 1; !(a[e >>> 2] >>> 24 - e % 4 * 8 & 255);) {
                    e--
                };
                b[sigBytes] = e + 1
            }
        },
        b
});
! function(e, a, b) {
    object == typeof exports ? module[exports] = exports = a(require(./core), require(./sha1), require(./hmac)) : function == typeof define && define[amd] ? define([./core, ./sha1, ./hmac], a) : a(e[JQMP])
}(this, function(e) {
    return function() {
            var a = e,
                b = a[lib],
                i = b[Base],
                k = b[WordArray],
                m = a[algo],
                c = m[SHA1],
                d = m[HMAC],
                p = m[EHYME] = i[extend]({
                    cfg: i[extend]({
                        khoaCai: 4,
                        hasher: c,
                        itenay: 1
                    }),
                    init: function(e) {
                        this[cfg] = this[cfg][extend](e)
                    },
                    compute: function(e, a) {
                        for (var b = this[cfg], i = d[create](b[hasher], e), m = k[create](), c = k[create]([1]), p = m[words], f = c[words], q = b[khoaCai], D = b[itenay]; p[length] < q;) {
                            var g = i[update](a)[finalize](c);
                            i[reset]();
                            for (var K = g[words], F = K[length], j = g, P = 1; P < D; P++) {
                                j = i[finalize](j),
                                    i[reset]();
                                for (var J = j[words], O = 0; O < F; O++) {
                                    K[O] ^= J[O]
                                }
                            };
                            m[concat](g),
                                f[0]++
                        };
                        return m[sigBytes] = 4 * q,
                            m
                    }
                });
            a[EHYME] = function(e, a, b) {
                return p[create](b)[compute](e, a)
            }
        }(),
        e[EHYME]
})
